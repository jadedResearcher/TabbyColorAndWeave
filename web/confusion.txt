I notice I am confused.

If I have both heddle and warp chain groups rendered to the svg (still no graphics) the individual warp chains render to the heddle group.

if i remove the heddle group they don't show up anywhere in the dom.

do svg groups work differnet than i think?

ah i see, the heddle view is still using divs, not groups. whoops. also i made its class WarpChain like a dunkass

so REALLY the problem is NO group really works


alright new confusion actually.

heddle group has two heddle subgroups in it.

but warpChain group has nothing in it STILL.

still don't know why but if i coyp heddle's code to warp chain it works so *shrug*

hrm...

        /*int x = 0;
        for(WarpThread thread in chain.threads) {
            x+= 10;
            new ThreadView(thread, element,x)..renderThread();
        }*/

that seems to break it. why?

~~~

alright so what i wanna do right now is programmatically get a default threading go, then take a break for maybe an hour, clear my head
and THEN Worry about rendering threads.

this'll be the meat of this. does thread veer left or right? i don't fucking know and i hope svg paths can help me.


when return: use svg path to draw a thing line between the thread, and each heddle_index/section_index pair it has.
(should i destroy and recreate if it changes, or should i transform?)
(test if drag around heddle if threads move with, at least at end)


~~~~~~~~~~~~~~~~

its rendering!!!!

the only problem is that its rendering relative to the color group and not like, global coordinates?
   but you can see how, albeit offset, its attempting to thread itself into a single heddle


   gonna grab lunch and then see like...how do i get or specify global coordinates?

   gotcha! it wasn't global vs local coordinates, it was that i was moving the heddle with a transform


   ~~~

i notice i am confused

if(totalIndex%2==0) {
                    thread.heddleSections.add(heddles[0].holesAndSlots[heddle1Index]);
                    heddle1Index+= 1;
                }else {
                    thread.heddleSections.add(heddles[1].holesAndSlots[heddle2Index]);
                    heddle2Index+= 1;
                }
that's not right because it implies it never goes through the second heddle...

i need a way to ask a heddle "get me next slot to right of i", or left....



i think i need a break to clear my head.

my current confusion is:

JR NOTE: looking front slot that veers left to back hole
dart_sdk.js:18676 JR NOTE: left slot found at index 1, when initial was 3

but i SEE that the thing going through the slot is veering right, looks like index ................

oh.

I've been doing this all wrong.

I'm a FOOL.

index isn't just "total /2" or even "how many threads have gone into a single heddle"  BECAUSE MULTIPLE THREADS GO INTO THE SAME SECTION.

i'm a fool .  index should just be (for these start up algs) how many threads are already done. no no, thats not right its...


hrm.

Okay let's go through the use case.

I have a slot going through both heddles. The next thread is "same slot as before, but veer left after".

i'm not looking for an index so much as a spot? how do i know when to move right?  when all four threads are placed....

